package openprotocol

import (
	"fmt"
	"testing"
)

type TestDiag struct {
}

func (td *TestDiag) Info(msg string) {
	fmt.Printf("info：%s", msg)
}

func (td *TestDiag) Debug(msg string) {
	fmt.Printf("debug：%s", msg)
}

func (td *TestDiag) Error(msg string, err error) {
	fmt.Println(fmt.Sprintf("error: %s", err.Error()))
}

func Test_DataEncoding(t *testing.T) {
	//d := &TestDiag{}
	testData := []byte{
		0xe6, 0x01, 0x71, 0x0d, 0x01,
		0x01, 0xcf, 0x03, 0x87, 0x0d, 0x01, 0x01, 0x14,
		0x02, 0x9c, 0x0d, 0x01, 0x01, 0x92, 0x03, 0xb2,
		0x0d, 0x01, 0x01, 0xea, 0x02, 0xc8, 0x0d, 0x01,
		0x01, 0x08, 0x03, 0xdd, 0x0d, 0x01, 0x01, 0x14,
		0x02, 0xf3, 0x0d, 0x01, 0x01, 0xc0, 0x03, 0x09,
		0x0e, 0x01, 0x01, 0xd7, 0x01, 0x1e, 0x0e, 0x01,
		0x01, 0xda, 0x02, 0x34, 0x0e, 0x01, 0x01, 0xe6,
		0x01, 0x49, 0x0e, 0x01, 0x01, 0x6f, 0x02, 0x5f,
		0x0e, 0x01, 0x01, 0x2e, 0x01, 0x75, 0x0e, 0x01,
		0x01, 0x36, 0x03, 0x8a, 0x0e, 0x01, 0x01, 0x2e,
		0x01, 0x9f, 0x0e, 0x01, 0x01, 0x60, 0x02, 0xb5,
		0x0e, 0x01, 0x01, 0x4d, 0x01, 0xcb, 0x0e, 0x01,
		0x01, 0xe6, 0x01, 0xe0, 0x0e, 0x01, 0x01, 0x8a,
		0x01, 0xf6, 0x0e, 0x01, 0x01, 0x6f, 0x02, 0x0c,
		0x0f, 0x01, 0x01, 0x7b, 0x01, 0x21, 0x0f, 0x01,
		0x01, 0xe6, 0x01, 0x37, 0x0f, 0x01, 0x01, 0x6c,
		0x01, 0x4c, 0x0f, 0x01, 0x01, 0x4d, 0x01, 0x62,
		0x0f, 0x01, 0x01, 0x60, 0x02, 0x78, 0x0f, 0x01,
		0x01, 0x6c, 0x01, 0x8d, 0x0f, 0x01, 0x01, 0x7f,
		0x02, 0xa3, 0x0f, 0x01, 0x01, 0x4d, 0x01, 0xb9,
		0x0f, 0x01, 0x01, 0x23, 0x02, 0xce, 0x0f, 0x01,
		0x01, 0x3e, 0x01, 0xe3, 0x0f, 0x01, 0x01, 0x36,
		0x03, 0xf9, 0x0f, 0x01, 0x01, 0x8a, 0x01, 0x0f,
		0x10, 0x01, 0x01, 0xde, 0x03, 0x24, 0x10, 0x01,
		0x01, 0x60, 0x02, 0x3a, 0x10, 0x01, 0x01, 0xda,
		0x02, 0x4f, 0x10, 0x01, 0x01, 0x8a, 0x01, 0x65,
		0x10, 0x01, 0x01, 0x77, 0x04, 0x7b, 0x10, 0x01,
		0x01, 0x7b, 0x01, 0x90, 0x10, 0x01, 0x01, 0xfd,
		0x03, 0xa6, 0x10, 0x01, 0x01, 0x42, 0x02, 0xbc,
		0x10, 0x01, 0x01, 0x59, 0x04, 0xd1, 0x10, 0x01,
		0x01, 0x32, 0x02, 0xe7, 0x10, 0x01, 0x01, 0x3e,
		0x05, 0xfc, 0x10, 0x01, 0x01, 0x04, 0x02, 0x12,
		0x11, 0x01, 0x01, 0x08, 0x07, 0x27, 0x11, 0x01,
		0x01, 0x55, 0x07, 0x3d, 0x11, 0x01, 0x01, 0xa2,
		0x0f, 0x52, 0x11, 0x01, 0x01, 0x9b, 0x19, 0x70,
		0x11, 0x01, 0x01, 0xb2, 0x23, 0x7f, 0x11, 0x01,
		0x01, 0xc2, 0x2b, 0x8a, 0x11, 0x01, 0x01, 0xdd,
		0x36, 0x93, 0x11, 0x01, 0x01, 0x51, 0x41, 0x9d,
		0x11, 0x01, 0x01, 0x59, 0x4b, 0xa7, 0x11, 0x01,
		0x01, 0x24, 0x55, 0xb2, 0x11, 0x01, 0x01, 0x9b,
		0x60, 0xbc, 0x11, 0x01, 0x01, 0x07, 0x6d, 0xc7,
		0x11, 0x01, 0x01, 0x07, 0x79, 0xd1, 0x11, 0x01,
		0x01, 0x91, 0x85, 0xdc, 0x11, 0x01, 0x01, 0xe6,
		0x93, 0xe6, 0x11, 0x01, 0x01, 0x78, 0xa2, 0xf0,
		0x11, 0x01, 0x01, 0xc9, 0xaf, 0xfa, 0x11, 0x01,
		0x01, 0x5b, 0xbe, 0x05, 0x12, 0x01, 0x01, 0xd3,
		0xcd, 0x0f, 0x12, 0x01, 0x01, 0x09, 0xdc, 0x19,
		0x12, 0x01, 0x01, 0xd0, 0xe8, 0x23, 0x12, 0x01,
		0x01, 0xf3, 0xf5, 0x2e, 0x12, 0x01, 0x01, 0xd2,
		0xff, 0xfe, 0x31, 0x12, 0x01, 0x01, 0xff, 0xff,
		0xff, 0xfe, 0x32, 0x12, 0x01, 0x01, 0x94, 0xff,
		0xfe, 0x32, 0x12, 0x01, 0x01, 0x45, 0x3a, 0x1a,
		0x12, 0x01, 0x01, 0x15, 0x12, 0x15, 0x12, 0x01,
		0x01, 0xc0, 0x03, 0x12, 0x12, 0x01, 0x01, 0xc0,
		0x03, 0x12, 0x12, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01}
	fmt.Println(fmt.Sprintf("Test Data: %# 20X", testData))
	//torques, angels := CurveDataDecoding(testData, 0.000345, 0.00055, d)
	//assert.NotNil(t, torques)
	//assert.NotNil(t, angels)
}

func Test_MultiSpindle(t *testing.T) {
	raw := "010102                         030104002050002060000070080110000901300010012000110000012099991300000142019-05-09:02:48:56152019-09-04:08:43:43162560917018010111012033100020"

	ms := MultiSpindleResult{}
	ms.Deserialize(raw)

	fmt.Println(ms)
}
